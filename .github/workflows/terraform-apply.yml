---
name: 'Terraform Apply'

on:
  workflow_dispatch:
  # push:
  #   branches:
  #   - master
  # pull_request:

jobs:

  ###########################
  # PLAN

  plan-terraform:
    if: ${{ always() }}
    # name: 'Terraform'
    runs-on: ubuntu-latest
    # environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:


    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Make all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -recursive -diff

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Check
      id: check
      run: terraform fmt -recursive -check

    # - name: Print Environment
    #   run: |
    #     env | sort
    #
    # - name: List Directory
    #   run: |
    #     find .

    - name: PRINT
      id: print-stuff
      run: |
        echo "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/cancel"
        echo "${GITHUB_REPOSITORY}"
        echo "${GITHUB_JOB}_${GITHUB_EVENT_NAME}.plan"
        echo "${GITHUB_WORKFLOW}_${GITHUB_RUN_ID}.plan"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        # role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
        role-duration-seconds: 1200
        role-session-name: ${{env.GITHUB_WORKFLOW}}-${{env.GITHUB_RUN_ID}}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      # if: ${{ steps.print-stuff.}}
      # run: terraform plan -compact-warnings -out "${GITHUB_RUN_ID}.plan"
      run: terraform plan -compact-warnings -out "terraform.plan"

    - name: Upload outfile artifact
      uses: actions/upload-artifact@v2
      # working-directory: ./plans
      with:
        name: "terraform.plan"
        path: "terraform.plan"
        # path: "terraform.plan"
        # name: "${{env.GITHUB_RUN_ID}}.plan"
        # path: "${{env.GITHUB_RUN_ID}}.plan"

    # - name: Upload outfile artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: "terraform.plan"
    #     path: "terraform.plan"


    # - name: cancel if failed
    #   id: cancel-if-failed
    #   if: failure()
    #   run: |
    #     curl -v -X POST \
    #       -H "Accept: application/vnd.github.v3+json" \
    #       -H "Authorization: ${{ secrets.GITHUB_TOKEN }}" \
    #       "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/cancel"

    # - uses: vishnudxb/cancel-workflow@v1.2
    #   if: failure()
    #   with:
    #     repo: octocat/hello-world
    #     workflow_id: ${{ github.run_id }}
    #     access_token: ${{ github.token }}


  ###########################
  # APPLY

  apply-terraform:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    environment: 'approve-plan'
    needs: plan-terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

    - name: PRINT
      id: print-stuff
      run: |
        echo "https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/cancel"
        echo "${GITHUB_REPOSITORY}"
        echo "${GITHUB_JOB}_${GITHUB_EVENT_NAME}.plan"
        echo "${GITHUB_WORKFLOW}_${GITHUB_RUN_ID}.plan"


    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Download outfile artifact
      uses: actions/download-artifact@v2
      with:
        name: "terraform.plan"
        path: "terraform.plan"

    - name: MKDIR
      run: |
        mkdir -p ./plans

    - name: Download outfile artifact
      uses: actions/download-artifact@v2
      with:
        name: "terraform.plan"
        path: "./plans/terraform.plan"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init

    # Make all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: format
      run: terraform fmt -recursive -diff

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Check
      id: check
      run: terraform fmt -recursive -check

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        # role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
        role-duration-seconds: 1200
        role-session-name: ${{env.GITHUB_WORKFLOW}}-${{env.GITHUB_RUN_ID}}


    - name: find
      run: |
        echo PWD: $PWD
        find .
        find . -iname terraform.plan

    # # Applies an execution plan
    # - name: Terraform Apply
    #   id: apply
    #   # if: ${{ steps.print-stuff.}}
    #   run: terraform apply "terraform.plan"
