---
name: 'Terraform Destroy'

on:
  workflow_dispatch:
  # push:
  #   branches:
  #   - master
  # pull_request:

jobs:

  terraform-destroy:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    environment: 'approve-plan'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        # role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        # role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
        role-duration-seconds: 1200
        role-session-name: ${{env.GITHUB_WORKFLOW}}-${{env.GITHUB_RUN_ID}}

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      # with:
      #   cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Make all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -recursive -diff

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Check
      run: terraform fmt -recursive -check

    # Generates an execution destroy for Terraform
    - name: Terraform Plan
      id: destroy
      continue-on-error: true
      run: terraform destroy -auto-approve
       # -out myoutfile.out

    - name: Terraform Plan Status
      if: steps.destroy.outcome == 'failure'
      run: exit 1
